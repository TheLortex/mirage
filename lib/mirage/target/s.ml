open Functoria
module Key = Mirage_key

(** A Mirage target: target consists in multiple backends grouped together. *)
module type TARGET = sig
  type t
  (** The type representing a specific backend in a target. *)

  val cast : Key.mode -> t
  (** Ensures the mode is a backend supported by this target. *)

  val packages : t -> package list
  (** The required packages to support this backend. *)

  val configure : Info.t -> unit Action.t
  (** Configure-time actions. *)

  val configure_files : Info.t -> Fpath.t list
  (** Files generated by the configure step. *)

  val build : Info.t -> unit Action.t
  (** Actions performed between the build and the link step. *)

  val link : name:string -> Info.t -> string Action.t
  (** Actions necessary to link for this backend. *)

  val install : Info.t -> Install.t
  (** [install i] returns which files are installed in context [i]. *)

  val result : string
  (** The name of the binary file generated by the build step. *)

  val dontlink : string list
  (** Which libraries should not be linked by ocamlbuild. *)

  val ocamlbuild_tags : string list
  (** Additional tags to be used by ocamlbuild. *)
end
